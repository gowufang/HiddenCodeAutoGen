// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.2.1
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnitTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.2.1")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GenerateFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Generate.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Generate", "  As Generator user\r\n  I want to get generated content\r\n  So that I can improve m" +
                    "y development speed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Generate")))
            {
                UnitTests.GenerateFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("No partial class")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generate")]
        public virtual void NoPartialClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No partial class", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 7
    testRunner.Given("I have source code:", @"// -----------------------------------------------------------------------
// <copyright file=""WireEditingViewModel.cs"" company=""Honeywell"">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Chart.VMWire.ViewModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    public class WireEditingViewModel : WireBaseViewModel
    {
    }
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
    testRunner.And("I design to use default generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
    testRunner.When("I ask to generate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("the result should be:", "", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("multiple class")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generate")]
        public virtual void MultipleClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("multiple class", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 37
    testRunner.Given("I have source code:", "// -----------------------------------------------------------------------\r\n// <c" +
                    "opyright file=\"WireBaseViewModel.cs\" company=\"Honeywell\">\r\n// TODO: Update copyr" +
                    "ight text.\r\n// </copyright>\r\n// ------------------------------------------------" +
                    "-----------------------\r\n\r\nnamespace Chart.VMWire.ViewModel\r\n{\r\n    using System" +
                    ";\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using Syst" +
                    "em.Text;\r\n    using System.Windows;\r\n\r\n    [AttributeUsage(AttributeTargets.Clas" +
                    "s, Inherited = false, AllowMultiple = true)]\r\n    public sealed class AutoGenAtt" +
                    "ribute : Attribute\r\n    {\r\n        public string FieldName { get; private set; }" +
                    "\r\n        public string BackFieldName { get; private set; }\r\n        public Type" +
                    " FieldType { get; private set; }\r\n        public object DefaultValue { get; priv" +
                    "ate set; }\r\n\r\n        public AutoGenAttribute(string fieldName, Type fieldType, " +
                    "object defaultValue)\r\n            : this(fieldName, \"_\" + fieldName.Substring(0," +
                    " 1).ToLower() + fieldName.Substring(1), fieldType, defaultValue)\r\n        {\r\n   " +
                    "     }\r\n\r\n        public AutoGenAttribute(string fieldName, string backFieldName" +
                    ", Type fieldType, object defaultValue)\r\n        {\r\n            this.FieldName = " +
                    "fieldName;\r\n            this.BackFieldName = backFieldName;\r\n            this.Fi" +
                    "eldType = fieldType;\r\n            this.DefaultValue = defaultValue;\r\n        }\r\n" +
                    "    }\r\n\r\n    /// <summary>\r\n    /// TODO: Update summary.\r\n    /// </summary>\r\n " +
                    "   [AutoGen(\"WireData\", typeof(SquarePolyline), null)]\r\n    [AutoGen(\"Visibility" +
                    "\", typeof(Visibility), Visibility.Hidden)]\r\n    public partial class WireBaseVie" +
                    "wModel : ViewModelBase\r\n    {\r\n    }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
    testRunner.And("I design to use default generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
    testRunner.When("I ask to generate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
    testRunner.Then("the result should be:", "", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("standard autogen (only one type of AutoGen)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generate")]
        public virtual void StandardAutogenOnlyOneTypeOfAutoGen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("standard autogen (only one type of AutoGen)", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 92
    testRunner.Given("I have source code:", @"// -----------------------------------------------------------------------
// <copyright file=""WireBaseViewModel.cs"" company=""Honeywell"">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Chart.VMWire.ViewModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Windows;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    [AutoGen(""WireData"", typeof(string), ""null"")]
    [AutoGen(""Visibility"", typeof(Visibility), ""Visibility.Hidden"")]
    public partial class WireBaseViewModel : ViewModelBase
    {
    }
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
    testRunner.And("I design to use default generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
    testRunner.When("I ask to generate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
    testRunner.And("Remove comments before namespace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
    testRunner.Then("the result should be:", "namespace Chart.VMWire.ViewModel\r\n{\r\n    using System;\r\n    using System.Collecti" +
                    "ons.Generic;\r\n    using System.Linq;\r\n    using System.Text;\r\n    using System.W" +
                    "indows;\r\n\r\n    public partial class WireBaseViewModel\r\n    {\r\n        /// <summa" +
                    "ry>\r\n        /// Field which backs the WireData property\r\n        /// </summary>" +
                    "\r\n        private string _wireData = \"null\";\r\n\r\n        /// <summary>\r\n        /" +
                    "// Gets / sets the WireData value\r\n        /// </summary>\r\n        public string" +
                    " WireData\r\n        {\r\n            get { return _wireData; }\r\n            set\r\n  " +
                    "          {\r\n                if (_wireData == value) return;\r\n                _w" +
                    "ireData = value;\r\n\r\n                OnWireDataChanged(value);\r\n                O" +
                    "nPropertyChanged(\"WireData\");\r\n            }\r\n        }\r\n\r\n        /// <summary>" +
                    "\r\n        /// Invoked when the value of WireData changes\r\n        /// </summary>" +
                    "\r\n        partial void OnWireDataChanged(string value);\r\n        /// <summary>\r\n" +
                    "        /// Field which backs the Visibility property\r\n        /// </summary>\r\n " +
                    "       private Visibility _visibility = Visibility.Hidden;\r\n\r\n        /// <summa" +
                    "ry>\r\n        /// Gets / sets the Visibility value\r\n        /// </summary>\r\n     " +
                    "   public Visibility Visibility\r\n        {\r\n            get { return _visibility" +
                    "; }\r\n            set\r\n            {\r\n                if (_visibility == value) r" +
                    "eturn;\r\n                _visibility = value;\r\n\r\n                OnVisibilityChan" +
                    "ged(value);\r\n                OnPropertyChanged(\"Visibility\");\r\n            }\r\n  " +
                    "      }\r\n\r\n        /// <summary>\r\n        /// Invoked when the value of Visibili" +
                    "ty changes\r\n        /// </summary>\r\n        partial void OnVisibilityChanged(Vis" +
                    "ibility value);\r\n    }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("mixed type of autogen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generate")]
        public virtual void MixedTypeOfAutogen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("mixed type of autogen", ((string[])(null)));
#line 187
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 188
    testRunner.Given("I have source code:", @"// -----------------------------------------------------------------------
// <copyright file=""WireBaseViewModel.cs"" company=""Honeywell"">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Chart.VMWire.ViewModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Windows;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    [AutoGenEntity(""WireData"", typeof(string), false)]
    [AutoGenEntity(""Visibility"", typeof(Visibility), true, ""Visibility.Hidden"")]
    [AutoGen(""WireInfo"", typeof(string), ""null"")]
    public partial class WireBaseViewModel : ViewModelBase
    {
    }
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 215
    testRunner.And("I design to use embedded generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
    testRunner.When("I ask to generate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
    testRunner.Then("the result should be:", "// -----------------------------------------------------------------------\r\n// Au" +
                    "to generated by Icer WPF Smart Generator\r\n// Don\'t modify this file manually!\r\n/" +
                    "/ <auto-generated />\r\n// -------------------------------------------------------" +
                    "----------------\r\n\r\nnamespace Chart.VMWire.ViewModel\r\n{\r\n    using System;\r\n    " +
                    "using System.Collections.Generic;\r\n    using System.Linq;\r\n    using System.Text" +
                    ";\r\n    using System.Windows;\r\n\r\n    public partial class WireBaseViewModel\r\n    " +
                    "{\r\n        public string WireData { get; set; }\r\n        public Visibility Visib" +
                    "ility { get; private set; }\r\n\r\n        public WireBaseViewModel(string wireData," +
                    " Visibility visibility = Visibility.Hidden)\r\n        {\r\n            this.WireDat" +
                    "a = wireData;\r\n            this.Visibility = visibility;\r\n        }\r\n        ///" +
                    " <summary>\r\n        /// Field which backs the WireInfo property\r\n        /// </s" +
                    "ummary>\r\n        private string _wireInfo = \"null\";\r\n\r\n        /// <summary>\r\n  " +
                    "      /// Gets / sets the WireInfo value\r\n        /// </summary>\r\n        public" +
                    " string WireInfo\r\n        {\r\n            get { return _wireInfo; }\r\n            " +
                    "set\r\n            {\r\n                if (_wireInfo == value) return;\r\n           " +
                    "     _wireInfo = value;\r\n\r\n                OnWireInfoChanged(value);\r\n          " +
                    "      OnPropertyChanged(\"WireInfo\");\r\n            }\r\n        }\r\n\r\n        /// <s" +
                    "ummary>\r\n        /// Invoked when the value of WireInfo changes\r\n        /// </s" +
                    "ummary>\r\n        partial void OnWireInfoChanged(string value);\r\n    }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("autogen dp")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generate")]
        public virtual void AutogenDp()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("autogen dp", ((string[])(null)));
#line 272
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 273
    testRunner.Given("I have source code:", @"// -----------------------------------------------------------------------
// <copyright file=""WireBaseViewModel.cs"" company=""Honeywell"">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Chart.VMWire.ViewModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Windows;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    [AutoGenDP(""WireInfo"", typeof(string), ""null"")]
    [AutoGenDP(""WireInfo2"", typeof(Wire), ""new Wire()"")]
    public partial class WireBaseViewModel : ViewModelBase
    {
    }
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 299
    testRunner.And("I design to use embedded generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
    testRunner.When("I ask to generate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 301
    testRunner.Then("the result should be:", "// -----------------------------------------------------------------------\r\n// Au" +
                    "to generated by Icer WPF Smart Generator\r\n// Don\'t modify this file manually!\r\n/" +
                    "/ <auto-generated />\r\n// -------------------------------------------------------" +
                    "----------------\r\n\r\nnamespace Chart.VMWire.ViewModel\r\n{\r\n    using System;\r\n    " +
                    "using System.Collections.Generic;\r\n    using System.Linq;\r\n    using System.Text" +
                    ";\r\n    using System.Windows;\r\n\r\n    public partial class WireBaseViewModel\r\n    " +
                    "{\r\n        /// <summary>\r\n        /// Gets / sets the WireInfo property value, T" +
                    "his is a dependency property\r\n        /// </summary>\r\n        public string Wire" +
                    "Info\r\n        {\r\n            get { return (string)GetValue(WireInfoProperty); }\r" +
                    "\n            set { SetValue(WireInfoProperty, value); }\r\n        }\r\n\r\n        //" +
                    "/ <summary>\r\n        /// Defines the WireInfo dependnecy property.\r\n        /// " +
                    "</summary>\r\n        public static readonly DependencyProperty WireInfoProperty =" +
                    "\r\n            DependencyProperty.Register(\"WireInfo\", typeof(string), typeof(Wir" +
                    "eBaseViewModel),\r\n                new PropertyMetadata(\"null\", new PropertyChang" +
                    "edCallback(OnWireInfoPropertyChanged)));\r\n\r\n        /// <summary>\r\n        /// I" +
                    "nvoked when the WireInfo property changes\r\n        /// </summary>\r\n        parti" +
                    "al void OnWireInfoPropertyChanged(DependencyPropertyChangedEventArgs e);\r\n\r\n    " +
                    "    private static void OnWireInfoPropertyChanged(DependencyObject d, Dependency" +
                    "PropertyChangedEventArgs e)\r\n        {\r\n            WireBaseViewModel control = " +
                    "d as WireBaseViewModel;\r\n            control.OnWireInfoPropertyChanged(e);\r\n    " +
                    "    }\r\n        /// <summary>\r\n        /// Gets / sets the WireInfo2 property val" +
                    "ue, This is a dependency property\r\n        /// </summary>\r\n        public Wire W" +
                    "ireInfo2\r\n        {\r\n            get { return (Wire)GetValue(WireInfo2Property);" +
                    " }\r\n            set { SetValue(WireInfo2Property, value); }\r\n        }\r\n\r\n      " +
                    "  /// <summary>\r\n        /// Defines the WireInfo2 dependnecy property.\r\n       " +
                    " /// </summary>\r\n        public static readonly DependencyProperty WireInfo2Prop" +
                    "erty =\r\n            DependencyProperty.Register(\"WireInfo2\", typeof(Wire), typeo" +
                    "f(WireBaseViewModel),\r\n                new PropertyMetadata(new Wire(), new Prop" +
                    "ertyChangedCallback(OnWireInfo2PropertyChanged)));\r\n\r\n        /// <summary>\r\n   " +
                    "     /// Invoked when the WireInfo2 property changes\r\n        /// </summary>\r\n  " +
                    "      partial void OnWireInfo2PropertyChanged(DependencyPropertyChangedEventArgs" +
                    " e);\r\n\r\n        private static void OnWireInfo2PropertyChanged(DependencyObject " +
                    "d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            WireBaseViewMod" +
                    "el control = d as WireBaseViewModel;\r\n            control.OnWireInfo2PropertyCha" +
                    "nged(e);\r\n        }\r\n    }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
