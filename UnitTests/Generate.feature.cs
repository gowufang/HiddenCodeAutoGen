// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnitTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Generate")]
    public partial class GenerateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Generate.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Generate", "    As Generator user\r\n    I want to get generated content\r\n    So that I can imp" +
                    "rove my development speed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("generate code")]
        [NUnit.Framework.TestCaseAttribute("AutogenCommand.in.txt", "AutogenCommand.out.txt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("AutogenDP.in.txt", "AutogenDP.out.txt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MisleadInComments.in.txt", "MisleadInComments.out.txt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MixedTypeAutogen.in.txt", "MixedTypeAutogen.out.txt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MultipleClass.in.txt", "MultipleClass.out.txt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("NoPartialClass.in.txt", "NoPartialClass.out.txt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("StandardAutogen.in.txt", "StandardAutogen.out.txt", new string[0])]
        public virtual void GenerateCode(string input, string output, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("generate code", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
    testRunner.Given(string.Format("I have source code in file {0}", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
    testRunner.When("I ask to generate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
    testRunner.Then(string.Format("the result should be like in file {0}", output), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
