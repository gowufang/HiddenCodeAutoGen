Feature: Generate
    As Generator user
    I want to get generated content
    So that I can improve my development speed

Scenario: No partial class
    Given I have source code:
    """
    // -----------------------------------------------------------------------
    // <copyright file="WireEditingViewModel.cs" company="Honeywell">
    // TODO: Update copyright text.
    // </copyright>
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;

        /// <summary>
        /// TODO: Update summary.
        /// </summary>
        public class WireEditingViewModel : WireBaseViewModel
        {
        }
    }
    """
    When I ask to generate
    Then the result should be:
    """
    """

Scenario: multiple class
    Given I have source code:
    """
    // -----------------------------------------------------------------------
    // <copyright file="WireBaseViewModel.cs" company="Honeywell">
    // TODO: Update copyright text.
    // </copyright>
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = true)]
        public sealed class AutoGenAttribute : Attribute
        {
            public string FieldName { get; private set; }
            public string BackFieldName { get; private set; }
            public Type FieldType { get; private set; }
            public object DefaultValue { get; private set; }

            public AutoGenAttribute(string fieldName, Type fieldType, object defaultValue)
                : this(fieldName, "_" + fieldName.Substring(0, 1).ToLower() + fieldName.Substring(1), fieldType, defaultValue)
            {
            }

            public AutoGenAttribute(string fieldName, string backFieldName, Type fieldType, object defaultValue)
            {
                this.FieldName = fieldName;
                this.BackFieldName = backFieldName;
                this.FieldType = fieldType;
                this.DefaultValue = defaultValue;
            }
        }

        /// <summary>
        /// TODO: Update summary.
        /// </summary>
        [AutoGen("WireData", typeof(SquarePolyline), null)]
        [AutoGen("Visibility", typeof(Visibility), Visibility.Hidden)]
        public partial class WireBaseViewModel : ViewModelBase
        {
        }
    }
    """
    When I ask to generate
    Then the result should be:
    """
    // -----------------------------------------------------------------------
    // Auto generated by Hidden Code Auto Generator
    // Don't modify this file manually!
    // <auto-generated />
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        public partial class WireBaseViewModel
        {
            /// <summary>
            /// Field which backs the WireData property
            /// </summary>
            private SquarePolyline _wireData = null;

            /// <summary>
            /// Gets / sets the WireData value
            /// </summary>
            public SquarePolyline WireData
            {
                get { return _wireData; }
                set
                {
                    if (_wireData == value) return;
                    _wireData = value;

                    OnWireDataChanged(value);
                    OnPropertyChanged("WireData");
                }
            }
    
            /// <summary>
            /// Invoked when the value of WireData changes
            /// </summary>
            partial void OnWireDataChanged(SquarePolyline value);
            /// <summary>
            /// Field which backs the Visibility property
            /// </summary>
            private Visibility _visibility = Visibility.Hidden;

            /// <summary>
            /// Gets / sets the Visibility value
            /// </summary>
            public Visibility Visibility
            {
                get { return _visibility; }
                set
                {
                    if (_visibility == value) return;
                    _visibility = value;

                    OnVisibilityChanged(value);
                    OnPropertyChanged("Visibility");
                }
            }
    
            /// <summary>
            /// Invoked when the value of Visibility changes
            /// </summary>
            partial void OnVisibilityChanged(Visibility value);
        }
    }
    """

Scenario: standard autogen (only one type of AutoGen)
    Given I have source code:
    """
    // -----------------------------------------------------------------------
    // <copyright file="WireBaseViewModel.cs" company="Honeywell">
    // TODO: Update copyright text.
    // </copyright>
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        /// <summary>
        /// TODO: Update summary.
        /// </summary>
        [AutoGen("WireData", typeof(string), "null")]
        [AutoGen("Visibility", typeof(Visibility), "Visibility.Hidden")]
        public partial class WireBaseViewModel : ViewModelBase
        {
        }
    }
    """
    When I ask to generate
    And Remove comments before namespace
    Then the result should be:
    """
    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        public partial class WireBaseViewModel
        {
            /// <summary>
            /// Field which backs the WireData property
            /// </summary>
            private string _wireData = "null";

            /// <summary>
            /// Gets / sets the WireData value
            /// </summary>
            public string WireData
            {
                get { return _wireData; }
                set
                {
                    if (_wireData == value) return;
                    _wireData = value;

                    OnWireDataChanged(value);
                    OnPropertyChanged("WireData");
                }
            }

            /// <summary>
            /// Invoked when the value of WireData changes
            /// </summary>
            partial void OnWireDataChanged(string value);
            /// <summary>
            /// Field which backs the Visibility property
            /// </summary>
            private Visibility _visibility = Visibility.Hidden;

            /// <summary>
            /// Gets / sets the Visibility value
            /// </summary>
            public Visibility Visibility
            {
                get { return _visibility; }
                set
                {
                    if (_visibility == value) return;
                    _visibility = value;

                    OnVisibilityChanged(value);
                    OnPropertyChanged("Visibility");
                }
            }

            /// <summary>
            /// Invoked when the value of Visibility changes
            /// </summary>
            partial void OnVisibilityChanged(Visibility value);
        }
    }
    """

Scenario: mixed type of autogen
    Given I have source code:
    """
    // -----------------------------------------------------------------------
    // <copyright file="WireBaseViewModel.cs" company="Honeywell">
    // TODO: Update copyright text.
    // </copyright>
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        /// <summary>
        /// TODO: Update summary.
        /// </summary>
        [AutoGenEntity("WireData", typeof(string), false)]
        [AutoGenEntity("Visibility", typeof(Visibility), true, "Visibility.Hidden")]
        [AutoGen("WireInfo", typeof(string), "null")]
        public partial class WireBaseViewModel : ViewModelBase
        {
        }
    }
    """
    When I ask to generate
    Then the result should be:
    """
    // -----------------------------------------------------------------------
    // Auto generated by Hidden Code Auto Generator
    // Don't modify this file manually!
    // <auto-generated />
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        public partial class WireBaseViewModel
        {
            public string WireData { get; set; }
            public Visibility Visibility { get; private set; }

            public WireBaseViewModel(string wireData, Visibility visibility = Visibility.Hidden)
            {
                this.WireData = wireData;
                this.Visibility = visibility;
            }
            /// <summary>
            /// Field which backs the WireInfo property
            /// </summary>
            private string _wireInfo = "null";

            /// <summary>
            /// Gets / sets the WireInfo value
            /// </summary>
            public string WireInfo
            {
                get { return _wireInfo; }
                set
                {
                    if (_wireInfo == value) return;
                    _wireInfo = value;

                    OnWireInfoChanged(value);
                    OnPropertyChanged("WireInfo");
                }
            }

            /// <summary>
            /// Invoked when the value of WireInfo changes
            /// </summary>
            partial void OnWireInfoChanged(string value);
        }
    }
    """

Scenario: autogen dp
    Given I have source code:
    """
    // -----------------------------------------------------------------------
    // <copyright file="WireBaseViewModel.cs" company="Honeywell">
    // TODO: Update copyright text.
    // </copyright>
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        /// <summary>
        /// TODO: Update summary.
        /// </summary>
        [AutoGenDP("WireInfo", typeof(string), "null")]
        [AutoGenDP("WireInfo2", typeof(Wire), "new Wire()")]
        public partial class WireBaseViewModel : ViewModelBase
        {
        }
    }
    """
    When I ask to generate
    Then the result should be:
    """
    // -----------------------------------------------------------------------
    // Auto generated by Hidden Code Auto Generator
    // Don't modify this file manually!
    // <auto-generated />
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        public partial class WireBaseViewModel
        {
            /// <summary>
            /// Gets / sets the WireInfo property value, This is a dependency property
            /// </summary>
            public string WireInfo
            {
                get { return (string)GetValue(WireInfoProperty); }
                set { SetValue(WireInfoProperty, value); }
            }

            /// <summary>
            /// Defines the WireInfo dependnecy property.
            /// </summary>
            public static readonly System.Windows.DependencyProperty WireInfoProperty =
                System.Windows.DependencyProperty.Register("WireInfo", typeof(string), typeof(WireBaseViewModel),
                    new System.Windows.PropertyMetadata("null", new System.Windows.PropertyChangedCallback(OnWireInfoPropertyChanged)));

            /// <summary>
            /// Invoked when the WireInfo property changes
            /// </summary>
            partial void OnWireInfoPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e);

            private static void OnWireInfoPropertyChanged(System.Windows.DependencyObject d, System.Windows.DependencyPropertyChangedEventArgs e)
            {
                WireBaseViewModel control = d as WireBaseViewModel;
                control.OnWireInfoPropertyChanged(e);
            }
            /// <summary>
            /// Gets / sets the WireInfo2 property value, This is a dependency property
            /// </summary>
            public Wire WireInfo2
            {
                get { return (Wire)GetValue(WireInfo2Property); }
                set { SetValue(WireInfo2Property, value); }
            }

            /// <summary>
            /// Defines the WireInfo2 dependnecy property.
            /// </summary>
            public static readonly System.Windows.DependencyProperty WireInfo2Property =
                System.Windows.DependencyProperty.Register("WireInfo2", typeof(Wire), typeof(WireBaseViewModel),
                    new System.Windows.PropertyMetadata(new Wire(), new System.Windows.PropertyChangedCallback(OnWireInfo2PropertyChanged)));

            /// <summary>
            /// Invoked when the WireInfo2 property changes
            /// </summary>
            partial void OnWireInfo2PropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e);

            private static void OnWireInfo2PropertyChanged(System.Windows.DependencyObject d, System.Windows.DependencyPropertyChangedEventArgs e)
            {
                WireBaseViewModel control = d as WireBaseViewModel;
                control.OnWireInfo2PropertyChanged(e);
            }
        }
    }
    """

Scenario: mislead in comments
    Given I have source code:
    """
    // -----------------------------------------------------------------------
    // <copyright HONEYWELL INC. file="COMViewModel.cs" company="Honeywell">
    //     Copyright 2013 HONEYWELL INC.
    //     All Rights Reserved.
    // </copyright>
    // -----------------------------------------------------------------------
    namespace Honeywell.ACS.RTU.Studio.GUI.ViewModel.Tab
    {
        using System;
        using System.Collections.ObjectModel;
        using System.Windows.Input;
        using Honeywell.ACS.RTU.Studio.BuilderModel;
        using Honeywell.ACS.RTU.Studio.Enums;
        using Honeywell.ACS.RTU.Studio.GUI.Resources;
        using Honeywell.ACS.RTU.Studio.GUI.ViewModel.Tree;
        using Honeywell.ACS.RTU.Studio.Infrastructure.MVVM;

        /// <summary>
        /// Class COMViewModel. This class cannot be inherited.
        /// </summary>
        [AutoGen("COMName", typeof(string), "")]
        [AutoGen("FlowControlVisibility", typeof(string), "Visible")]
        public sealed partial class COMViewModel : AutoSyncViewModel<StationSerial, BasicConfigItemViewModel>
        {
            /////// <summary>
            /////// The add command
            /////// </summary>
            ////private RelayCommand addCommand;

            /////// <summary>
            /////// The delete command
            /////// </summary>
            ////private RelayCommand delCommand;

            /// <summary>
            /// Initializes a new instance of the <see cref="COMViewModel"/> class.
            /// </summary>
            /// <param name="model">The model.</param>
            /// <exception cref="System.ArgumentException"></exception>
            public COMViewModel(object model)
                : base(model)
            {
                var pn = this.Model.PortName;
                switch (pn)
                {
                    case PortName.COM1:
                        this.COMType = PortType.RS232.ToString();
                        this.COMName = pn.ToString();
                        break;

                    case PortName.COM2:
                        this.COMType = PortType.RS232.ToString();
                        this.COMName = pn.ToString();
                        break;

                    case PortName.COM3:
                        this.COMType = PortType.RS485.ToString();
                        this.COMName = pn.ToString();
                        this.FlowControlVisibility = "Hidden";
                        break;

                    case PortName.COM4:
                        this.COMType = PortType.RS485.ToString();
                        this.COMName = pn.ToString();
                        this.FlowControlVisibility = "Hidden";
                        break;

                    default:
                        throw new ArgumentException();
                }

                this.DisplayName = pn.ToString();
            }

            /////// <summary>
            /////// Gets the add command.
            /////// </summary>
            /////// <value>The add command.</value>
            ////public ICommand AddCommand
            ////{
            ////    get { return this.addCommand ?? (this.addCommand = new RelayCommand(this.AddNew)); }
            ////}

            /////// <summary>
            /////// Gets the delete command.
            /////// </summary>
            /////// <value>The delete command.</value>
            ////public ICommand DelCommand
            ////{
            ////    get { return this.delCommand ?? (this.delCommand = new RelayCommand(this.Delete)); }
            ////}

            /// <summary>
            /// Regs this instance.
            /// </summary>
            protected override void Reg()
            {
                this.Register("PortProtocol");
                this.Register("BaudRate");
                this.Register("Parity");
                this.Register("DataBits");
                this.Register("StopBits");
                this.Register("FlowControl", "FlowCtrl");
                this.Register("PortName");
            }

            /////// <summary>
            /////// Adds the new.
            /////// </summary>
            /////// <param name="obj">The object.</param>
            ////private void AddNew(object obj)
            ////{
            ////    ////ModbusMasterViewModel newItem = new ModbusMasterViewModel();
            ////    newItem.ID = this.Parent.GetModbusMasterGlobalID() + 1;
            ////    this.ModbusMasterConfigurationList.Add(newItem);
            ////}

            /////// <summary>
            /////// Deletes the specified object.
            /////// </summary>
            /////// <param name="obj">The object.</param>
            ////private void Delete(object obj)
            ////{
            ////    if (this.SelectedModbusMasterConfiguration != null)
            ////    {
            ////        this.ModbusMasterConfigurationList.Remove(this.SelectedModbusMasterConfiguration);
            ////    }
            ////}
        }
    }
    """
    When I ask to generate
    Then the result should be:
    """
    // -----------------------------------------------------------------------
    // Auto generated by Hidden Code Auto Generator
    // Don't modify this file manually!
    // <auto-generated />
    // -----------------------------------------------------------------------

    namespace Honeywell.ACS.RTU.Studio.GUI.ViewModel.Tab
    {
        using System;
        using System.Collections.ObjectModel;
        using System.Windows.Input;
        using Honeywell.ACS.RTU.Studio.BuilderModel;
        using Honeywell.ACS.RTU.Studio.Enums;
        using Honeywell.ACS.RTU.Studio.GUI.Resources;
        using Honeywell.ACS.RTU.Studio.GUI.ViewModel.Tree;
        using Honeywell.ACS.RTU.Studio.Infrastructure.MVVM;

        public sealed partial class COMViewModel
        {
            /// <summary>
            /// Field which backs the COMName property
            /// </summary>
            private string _cOMName = "";

            /// <summary>
            /// Gets / sets the COMName value
            /// </summary>
            public string COMName
            {
                get { return _cOMName; }
                set
                {
                    if (_cOMName == value) return;
                    _cOMName = value;

                    OnCOMNameChanged(value);
                    OnPropertyChanged("COMName");
                }
            }

            /// <summary>
            /// Invoked when the value of COMName changes
            /// </summary>
            partial void OnCOMNameChanged(string value);
            /// <summary>
            /// Field which backs the FlowControlVisibility property
            /// </summary>
            private string _flowControlVisibility = "Visible";

            /// <summary>
            /// Gets / sets the FlowControlVisibility value
            /// </summary>
            public string FlowControlVisibility
            {
                get { return _flowControlVisibility; }
                set
                {
                    if (_flowControlVisibility == value) return;
                    _flowControlVisibility = value;

                    OnFlowControlVisibilityChanged(value);
                    OnPropertyChanged("FlowControlVisibility");
                }
            }

            /// <summary>
            /// Invoked when the value of FlowControlVisibility changes
            /// </summary>
            partial void OnFlowControlVisibilityChanged(string value);
        }
    }
    """

Scenario: autogen command
    Given I have source code:
    """
    // -----------------------------------------------------------------------
    // <copyright file="WireBaseViewModel.cs" company="Honeywell">
    // TODO: Update copyright text.
    // </copyright>
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        /// <summary>
        /// TODO: Update summary.
        /// </summary>
        [AutoGenCommand("NewProject")]
        [AutoGenCommand("OpenProject", "this.NewProject")]
        [AutoGenCommand("SaveProject", "this.SaveProject", "this.CanSaveProject")]
        public partial class WireBaseViewModel : ViewModelBase
        {
        }
    }
    """
    When I ask to generate
    Then the result should be:
    """
    // -----------------------------------------------------------------------
    // Auto generated by Hidden Code Auto Generator
    // Don't modify this file manually!
    // <auto-generated />
    // -----------------------------------------------------------------------

    namespace Chart.VMWire.ViewModel
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Windows;

        public partial class WireBaseViewModel
        {
            /// <summary>
            /// The NewProject command
            /// </summary>
            private RelayCommand _newProjectCommand;

            /// <summary>
            /// Gets the NewProject command.
            /// </summary>
            /// <value>The NewProject command.</value>
            public ICommand NewProjectCommand
            {
                get { return this._newProjectCommand ?? (this._newProjectCommand = new RelayCommand(this.ExecuteNewProjectWrap)); }
            }

            /// <summary>
            /// delegate for invoking NewProjectCommand
            /// </summary>
            private void ExecuteNewProjectWrap(object obj)
            {
                ExecuteNewProject(obj);
            }

            /// <summary>
            /// Invoked when NewProjectCommand invokes
            /// </summary>
            partial void ExecuteNewProject(object obj);

            /// <summary>
            /// The OpenProject command
            /// </summary>
            private RelayCommand _openProjectCommand;

            /// <summary>
            /// Gets the OpenProject command.
            /// </summary>
            /// <value>The OpenProject command.</value>
            public ICommand OpenProjectCommand
            {
                get { return this._openProjectCommand ?? (this._openProjectCommand = new RelayCommand(this.NewProject)); }
            }

            /// <summary>
            /// The SaveProject command
            /// </summary>
            private RelayCommand _saveProjectCommand;

            /// <summary>
            /// Gets the SaveProject command.
            /// </summary>
            /// <value>The SaveProject command.</value>
            public ICommand SaveProjectCommand
            {
                get { return this._saveProjectCommand ?? (this._saveProjectCommand = new RelayCommand(this.SaveProject, this.CanSaveProject)); }
            }

        }
    }
    """