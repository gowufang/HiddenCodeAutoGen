// -----------------------------------------------------------------------
// Auto generated by Hidden Code Auto Generator
// Don't modify this file manually!
// <auto-generated />
// -----------------------------------------------------------------------

namespace Chart.VMWire.ViewModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Windows;

    public partial class WireBaseViewModel<T1, T2>
    {
        /// <summary>
        /// Field which backs the WireData property
        /// </summary>
        private string _wireData = "null";

        /// <summary>
        /// Gets / sets the WireData value
        /// </summary>
        public string WireData
        {
            get { return _wireData; }
            set
            {
                if (_wireData == value) return;
                _wireData = value;

                OnWireDataChanged(value);
                OnPropertyChanged("WireData");
            }
        }

        /// <summary>
        /// Invoked when the value of WireData changes
        /// </summary>
        partial void OnWireDataChanged(string value);
        /// <summary>
        /// Field which backs the Visibility property
        /// </summary>
        private Visibility<T1, T2> _visibility = Visibility.Hidden;

        /// <summary>
        /// Gets / sets the Visibility value
        /// </summary>
        public Visibility<T1, T2> Visibility
        {
            get { return _visibility; }
            set
            {
                if (_visibility == value) return;
                _visibility = value;

                OnVisibilityChanged(value);
                OnPropertyChanged("Visibility");
            }
        }

        /// <summary>
        /// Invoked when the value of Visibility changes
        /// </summary>
        partial void OnVisibilityChanged(Visibility<T1, T2> value);
        /// <summary>
        /// Gets / sets the WireInfo property value, This is a dependency property
        /// </summary>
        public Dictionary<int, int[]> WireInfo
        {
            get { return (Dictionary<int, int[]>)GetValue(WireInfoProperty); }
            set { SetValue(WireInfoProperty, value); }
        }

        /// <summary>
        /// Defines the WireInfo dependnecy property.
        /// </summary>
        public static readonly System.Windows.DependencyProperty WireInfoProperty =
            System.Windows.DependencyProperty.Register("WireInfo", typeof(Dictionary<int, int[]>), typeof(WireBaseViewModel<T1, T2>),
                new System.Windows.PropertyMetadata(null, new System.Windows.PropertyChangedCallback(OnWireInfoPropertyChanged)));

        /// <summary>
        /// Invoked when the WireInfo property changes
        /// </summary>
        partial void OnWireInfoPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e);

        private static void OnWireInfoPropertyChanged(System.Windows.DependencyObject d, System.Windows.DependencyPropertyChangedEventArgs e)
        {
            WireBaseViewModel<T1, T2> control = d as WireBaseViewModel<T1, T2>;
            control.OnWireInfoPropertyChanged(e);
        }
    }
}
