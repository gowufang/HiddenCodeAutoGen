using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio;
using System.Diagnostics;
using System.Text.RegularExpressions;

namespace IcerWPFSmartGen
{
    [ComVisible(true)]
    [Guid("DC5BEA27-51D3-4330-9CB3-CB2F5FF7A014")]
    public class Generator : IVsSingleFileGenerator
    {
        #region IVsSingleFileGenerator Members

        public int DefaultExtension(out string pbstrDefaultExtension)
        {
            pbstrDefaultExtension = ".autogen.cs";
            return VSConstants.S_OK;
        }

        public int Generate(string wszInputFilePath, string bstrInputFileContents, string wszDefaultNamespace,
            IntPtr[] rgbOutputFileContents, out uint pcbOutput, IVsGeneratorProgress pGenerateProgress)
        {
            if (bstrInputFileContents == null)
            {
                throw new ArgumentNullException("bstrInputFileContents");
            }

            var gen = Generate(bstrInputFileContents);

            if (gen == null)
            {
                pcbOutput = 0;
                return VSConstants.S_FALSE;
            }

            byte[] bytes = Encoding.UTF8.GetBytes(gen);
            int length = bytes.Length;

            rgbOutputFileContents[0] = Marshal.AllocCoTaskMem(length);
            Marshal.Copy(bytes, 0, rgbOutputFileContents[0], length);

            pcbOutput = (uint)length;

            return VSConstants.S_OK;
        }

        private string Generate(string bstrInputFileContents)
        {
            Regex nsRx = new Regex("namespace (.*)\r\n\\{");
            Regex usRx = new Regex("using .*;");
            Regex clRx = new Regex(@"( *\[AutoGen\(.*\)\]\s*){1,}
(?<class>.*class \w*)");
            Regex atRx = new Regex(@"\[AutoGen\((?<data>.*)\)\]");

            var cls = clRx.Match(bstrInputFileContents).Groups["class"].Value;
            if (string.IsNullOrEmpty(cls)) return null;
            StringBuilder fs = new StringBuilder();
            // header
            fs.AppendLine(string.Format(@"// -----------------------------------------------------------------------
// Auto generated by Icer WPF Smart Generator
// Don't modify this file manually!
// Updated Time: {0}
// -----------------------------------------------------------------------
", DateTime.Now.ToLocalTime()));
            // namespace
            fs.AppendLine(nsRx.Match(bstrInputFileContents).Value);
            // using
            fs.AppendLine(usRx.Matches(bstrInputFileContents)
                .OfType<Match>()
                .Aggregate("", (str, m) => string.Format("{0}    {1}\r\n", str, m.Value)));

            var clswithatt = clRx.Match(bstrInputFileContents).Value;

            // class header
            fs.AppendLine(string.Format("    {0}", cls.TrimStart()));
            // class start
            fs.AppendLine("    {");
            // properties
            fs.Append(atRx.Matches(clswithatt)
                .OfType<Match>()
                .Aggregate("", (str, m) => str + GenAutoINPC(m.Groups["data"].Value)));

            // end
            fs.AppendLine("    }");
            fs.AppendLine("}");
            return fs.ToString();
        }

        private string GenAutoINPC(string str)
        {
            var ps = str.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
            var snippet = @"        /// <summary>
        /// Field which backs the $property$ property
        /// </summary>
        private $type$ $field$ = $defaultValue$;

        /// <summary>
        /// Gets / sets the $property$ value
        /// </summary>
        public $type$ $property$
        {
            get { return $field$; }
            set
            {
                if ($field$ == value) return;
                $field$ = value;

                On$property$Changed(value);
                OnPropertyChanged(""$property$"");
            }
        }
    
        /// <summary>
        /// Invoked when the value of $property$ changes
        /// </summary>
        partial void On$property$Changed($type$ value);
"
                .Replace("{", "{{")
                .Replace("}", "}}")
                .Replace("$property$", "{0}")
                .Replace("$type$", "{1}")
                .Replace("$field$", "{2}")
                .Replace("$defaultValue$", "{3}");

            var pr = ps[0].Replace("\"", "").Trim();
            var dv = ps[2].Trim();
            var tp = ps[1].Replace("typeof(", "").Replace(")", "").Trim();
            if (tp.ToLower() != "string") dv = dv.Replace("\"", "");
            return string.Format(snippet,
                pr,
                tp,
                "_" + pr.Substring(0, 1).ToLower() + pr.Substring(1),
                dv);
        }

#if DEBUG
        public string GenerateDebug(string text)
        {
            return Generate(text);
        }
#endif
        #endregion
    }

}
